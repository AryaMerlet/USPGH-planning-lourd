 using System.Collections.ObjectModel;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using USPGH_planning_lourd.classes;
using System;
using System.Linq;

namespace USPGH_planning_lourd;

///<summary>
    /// Interaction logic for MainWindow.xaml
///</summary>
public partial class MainWindow : Window
{
    public ObservableCollection
<User>Users { get; set; }
    private UserRoleManager _roleManager;

    public MainWindow()
    {
        InitializeComponent();
        Users = new ObservableCollection
    <User>();
        
        using (var db = new AppDbContext())
        {
            _roleManager = new UserRoleManager(db);
        }
        
        LoadUsers();
        DataContext = this;
    }

    private void LoadUsers()
    {
        using (var db = new AppDbContext())
        {
            Users.Clear();
            var userRoleManager = new UserRoleManager(db);
            
            var users = db.Users.ToList();
            foreach (var user in users)
            {
                userRoleManager.LoadUserRoles(user);
                Users.Add(user);
            }
        }
    }

    private void AddUser_Click(object sender, RoutedEventArgs e)
    {
        var addUserWindow = new AddUserWindow();
        if (addUserWindow.ShowDialog() == true)
        {
            LoadUsers();
        }
    }

    private void EditUser_Click(object sender, RoutedEventArgs e)
    {
        if (UsersList.SelectedItem is User selectedUser)
        {
            var editUserWindow = new EditUserWindow(selectedUser);
            if (editUserWindow.ShowDialog() == true)
            {
                LoadUsers();
            }
        }
    }

    private void DeleteUser_Click(object sender, RoutedEventArgs e)
    {
        if (UsersList.SelectedItem is User selectedUser)
        {
            // Check if the user has the admin role before allowing deletion
            using (var db = new AppDbContext())
            {
                var roleManager = new UserRoleManager(db);
                bool isAdmin = roleManager.IsUserInRole(selectedUser, "admin");
                
                if (isAdmin)
                {
                    MessageBox.Show("Cannot delete an administrator user.", "Error", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
            }
            
            MessageBoxResult result = MessageBox.Show("Are you sure you want to delete this user?", "Confirm", MessageBoxButton.YesNo, MessageBoxImage.Warning);
            if (result == MessageBoxResult.Yes)
            {
                using (var db = new AppDbContext())
                {
                    db.Users.Remove(selectedUser);
                    db.SaveChanges();
                }
                LoadUsers();
            }
        }
    }
}